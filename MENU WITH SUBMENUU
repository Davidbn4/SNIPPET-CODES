#include <Adafruit_GFX.h>    // Core graphics library
#include <Adafruit_TFTLCD.h> // Hardware-specific library

#define LCD_CS A3 // Chip Select goes to Analog 3
#define LCD_CD A2 // Command/Data goes to Analog 2
#define LCD_WR A1 // LCD Write goes to Analog 1
#define LCD_RD A0 // LCD Read goes to Analog 0
#define LCD_RESET A4 // Can alternately just connect to Arduino's reset pin

#define	BLACK   0x0000
#define	BLUE    0x001F
#define	RED     0xF800
#define	GREEN   0x07E0
#define CYAN    0x07FF
#define MAGENTA 0xF81F
#define YELLOW  0xFFE0
#define WHITE   0xFFFF

Adafruit_TFTLCD tft(LCD_CS, LCD_CD, LCD_WR, LCD_RD, LCD_RESET);

int selectedMenuItem = -1; // Initialize selected menu item to -1 (no selection)
bool inSubMenu = false; // Indicates if a submenu is displayed

const char* menuItems[] = {
  "BREAD",
  "BUTTER",
  "MILK",
  "EGGS",
  "SUGAR",
  "SALT",
  "FLOUR",
  "COCOA"
};

enum State {
  MENU,
  SUBMENU
};

State currentState = MENU;

void setup(void) {
  Serial.begin(9600);
  Serial.println(F("TFT LCD test"));

  Serial.print("TFT size is "); Serial.print(tft.width()); Serial.print("x"); Serial.println(tft.height());

  tft.reset();

  uint16_t identifier = tft.readID();

  if(identifier == 0x9325) {
    Serial.println(F("Found ILI9325 LCD driver"));
  } else if(identifier == 0x9328) {
    Serial.println(F("Found ILI9328 LCD driver"));
  } else if(identifier == 0x7575) {
    Serial.println(F("Found HX8347G LCD driver"));
  } else if(identifier == 0x9341) {
    Serial.println(F("Found ILI9341 LCD driver"));
  } else if(identifier == 0x8357) {
    Serial.println(F("Found HX8357D LCD driver"));
  } else {
    Serial.print(F("Unknown LCD driver chip: "));
    Serial.println(identifier, HEX);
    Serial.println(F("If using the Adafruit 2.8\" TFT Arduino shield, the line:"));
    Serial.println(F("  #define USE_ADAFRUIT_SHIELD_PINOUT"));
    Serial.println(F("should appear in the library header (Adafruit_TFT.h)."));
    Serial.println(F("If using the breakout board, it should NOT be #defined!"));
    Serial.println(F("Also if using the breakout, double-check that all wiring"));
    Serial.println(F("matches the tutorial."));
    return;
  }

  tft.begin(identifier);

  // Display the menu
  displayMenu();
}

void loop() {
  // Check if there is serial input available
  if (Serial.available() > 0) {
    char inputChar = Serial.read();

    switch (currentState) {
      case MENU:
        if (inputChar >= '1' && inputChar <= '8') { // Assuming you have 8 menu items
          selectedMenuItem = inputChar - '0'; // Convert character to integer
          inSubMenu = true;
          currentState = SUBMENU;
          Serial.print("Selected menu item: ");
          Serial.println(menuItems[selectedMenuItem - 1]);
          // Clear the screen and display the selected menu item as a header
          tft.fillScreen(BLACK);
          tft.setTextSize(2);
          tft.setTextColor(WHITE);
          tft.setCursor(10, 10);
          tft.println(menuItems[selectedMenuItem - 1]);
          // Display the "Return to Menu" button
          tft.setTextSize(1);
          tft.setCursor(10, tft.height() - 20);
          tft.setTextColor(YELLOW);
          tft.println("Return to Menu");
        } else if (inputChar == 'A') {
          currentState = SUBMENU;
          inSubMenu = true;
        } else {
          Serial.println("Invalid selection. Please enter a valid menu number (1-8) or 'A' for submenu.");
        }
        break;

      case SUBMENU:
        if (inputChar == '1') {
          inSubMenu = false;
          selectedMenuItem = -1; // Reset selectedMenuItem to indicate no selection
          currentState = MENU;
          delay(500); // Delay to prevent immediate reselection
          displayMenu(); // Display the menu again
        } else {
          // Handle submenu input
          // ...
        }
        break;
    }
  }
}

void displayMenu() {
  tft.fillScreen(BLACK); // Clear the screen

  // Print the menu options
  tft.setTextSize(2);
  tft.setTextColor(WHITE);
  tft.setCursor(10, 10);
  tft.println("Menu:");

  tft.setTextSize(1);

  for (int i = 0; i < 8; i++) {
    tft.setCursor(10, 30 + i * 20);
    tft.print(i+1);
    tft.print(". ");
    tft.println(menuItems[i]);
  }

  // Highlight the selected menu item if it's a valid selection
  if (selectedMenuItem >= 1 && selectedMenuItem <= 8) {
    tft.drawRect(0, 20 * (selectedMenuItem - 1)  + 30, 320, 20, YELLOW);
  }
}
